# ชื่อง่ายๆ ของ Workflow ที่จะแสดงในหน้า Actions ของ GitHub
name: CI/CD - Express Docker App

# กำหนด Trigger: ให้ Workflow นี้ทำงานทุกครั้งที่มีการ push ไปยัง branch 'main'
# on:
  # push:
    # branches: [ "main" ]
    # ถ้าต้องการ build ตอนแท็กด้วย ให้เปิดบรรทัดด้านล่าง
    # tags: [ 'v*.*.*' ]

# กำหนด Trigger: ให้ Workflow นี้ทำงานทุกครั้งที่มีการสร้าง Pull Request ไปยัง branch 'main'
# on:
#   pull_request:
#     branches: [ "main" ]

# กำหนด Trigger: แบบ Manual (Workflow Dispatch) เพื่อให้สามารถกดรันได้เองจากหน้า GitHub
on:
  workflow_dispatch:

# กำหนดใช้หลายๆ Trigger พร้อมกัน
# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
#   workflow_dispatch:

# กำหนด Environment Variables ที่จะใช้ใน Workflow นี้
env:
  DOCKER_REPO: iamsamitdev/express-docker-app
  APP_NAME: express-docker-app

# กำหนด Jobs ที่จะให้ทำงาน
jobs:
  # 1) ติดตั้งและรันเทสต์ (matrix: Linux/Windows)
  test:
    name: Install & Test (Node 22.x)
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: npm
      - name: Install
        run: npm ci
      - name: Test
        run: npm test
      - name: Notify failure to n8n
        if: failure()
        run: |
          curl -s -X POST "${{ secrets.N8N_WEBHOOK_URL }}" \
            -H 'Content-Type: application/json' \
            -d '{
              "project": "${{ github.repository }}",
              "stage": "Install & Test",
              "status": "failed",
              "build": "${{ github.run_number }}",
              "image": "'"${{ env.DOCKER_REPO }}:latest"'",
              "container": "'"${{ env.APP_NAME }}"'",
              "url": "http://localhost:3000/"
            }'

  # 2) Build & Push Docker image
  build_and_push:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REPO }}
          tags: |
            type=raw,value=${{ github.run_number }}
            type=raw,value=latest
            type=sha,format=short

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (target=production)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          target: production
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify success to n8n (Build & Push)
        if: success()
        run: |
          curl -s -X POST "${{ secrets.N8N_WEBHOOK_URL }}" \
            -H 'Content-Type: application/json' \
            -d '{
              "project": "${{ github.repository }}",
              "stage": "Build & Push",
              "status": "success",
              "build": "${{ github.run_number }}",
              "image": "'"${{ env.DOCKER_REPO }}:latest"'",
              "container": "'"${{ env.APP_NAME }}"'",
              "url": "http://localhost:3000/"
            }'

      - name: Notify failure to n8n (Build & Push)
        if: failure()
        run: |
          curl -s -X POST "${{ secrets.N8N_WEBHOOK_URL }}" \
            -H 'Content-Type: application/json' \
            -d '{
              "project": "${{ github.repository }}",
              "stage": "Build & Push",
              "status": "failed",
              "build": "${{ github.run_number }}",
              "image": "'"${{ env.DOCKER_REPO }}:latest"'",
              "container": "'"${{ env.APP_NAME }}"'",
              "url": "http://localhost:3000/"
            }'

  # 3) Smoke Test (รันคอนเทนเนอร์บน runner แล้วตรวจสุขภาพ)
  smoke_test:
    name: Smoke Test (run & curl)
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Pull latest
        run: docker pull ${{ env.DOCKER_REPO }}:latest

      - name: Run container
        run: |
          docker rm -f ${{ env.APP_NAME }} || true
          docker run -d --name ${{ env.APP_NAME }} -p 3000:3000 ${{ env.DOCKER_REPO }}:latest
          # รอแอปพร้อมให้บริการ
          for i in {1..20}; do
            if curl -fsS http://localhost:3000/ >/dev/null; then
              echo "App is up"
              exit 0
            fi
            echo "Waiting for app ($i)..."
            sleep 2
          done
          echo "App not responding in time" >&2
          docker logs ${{ env.APP_NAME }} || true
          exit 1

      - name: Show running container
        run: docker ps --filter "name=${{ env.APP_NAME }}" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"

      - name: Notify success to n8n (Deploy Local)
        if: success()
        run: |
          curl -s -X POST "${{ secrets.N8N_WEBHOOK_URL }}" \
            -H 'Content-Type: application/json' \
            -d '{
              "project": "${{ github.repository }}",
              "stage": "Deploy Local",
              "status": "success",
              "build": "${{ github.run_number }}",
              "image": "'"${{ env.DOCKER_REPO }}:latest"'",
              "container": "'"${{ env.APP_NAME }}"'",
              "url": "http://localhost:3000/"
            }'

      - name: Notify failure to n8n (Deploy Local)
        if: failure()
        run: |
          curl -s -X POST "${{ secrets.N8N_WEBHOOK_URL }}" \
            -H 'Content-Type: application/json' \
            -d '{
              "project": "${{ github.repository }}",
              "stage": "Deploy Local",
              "status": "failed",
              "build": "${{ github.run_number }}",
              "image": "'"${{ env.DOCKER_REPO }}:latest"'",
              "container": "'"${{ env.APP_NAME }}"'",
              "url": "http://localhost:3000/"
            }'

      - name: Cleanup Docker cache/images
        if: always()
        run: |
          docker rm -f ${{ env.APP_NAME }} || true
          docker image prune -af -f || true
          docker builder prune -af -f || true

  # 4) (ทางเลือก) Deploy ไปยังเซิร์ฟเวอร์ระยะไกลผ่าน SSH
  # เปิดใช้ได้เมื่อพร้อม และเพิ่ม secrets: DEPLOY_HOST, DEPLOY_USER, DEPLOY_KEY
  # deploy_remote:
  #   name: Deploy to Remote Server
  #   runs-on: ubuntu-latest
  #   needs: smoke_test
  #   steps:
  #     - name: SSH Deploy (pull & run)
  #       uses: appleboy/ssh-action@v1.2.0
  #       with:
  #         host: ${{ secrets.DEPLOY_HOST }}
  #         username: ${{ secrets.DEPLOY_USER }}
  #         key: ${{ secrets.DEPLOY_KEY }}
  #         script: |
  #           docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
  #           docker pull ${{ env.DOCKER_REPO }}:latest
  #           docker rm -f ${{ env.APP_NAME }} || true
  #           docker run -d --name ${{ env.APP_NAME }} -p 3000:3000 ${{ env.DOCKER_REPO }}:latest