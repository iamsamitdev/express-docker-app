// ประกาศฟังก์ชันไว้ด้านนอก pipeline เพื่อให้สามารถเรียกใช้ซ้ำได้
def notifyN8n(String status, String stageName, String imageTag, String url = "http://localhost:3000/") {
    // สร้าง payload สำหรับส่งไปยัง n8n
    // เพิ่ม build number และ timestamp เพื่อให้ข้อมูลครบถ้วน
    def payload = [
        project: env.JOB_NAME,
        stage: stageName,
        status: status,
        build: env.BUILD_NUMBER, // The current Jenkins build number
        image: "${env.DOCKER_REPO}:${imageTag}", // The actual image tag being deployed
        container: env.APP_NAME,
        url: url,
        timestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone('UTC'))
    ]
    def jsonPayload = new groovy.json.JsonOutput().toJson(payload)

    // ส่งข้อมูลไปยัง n8n ผ่าน Webhook URL ที่เก็บใน Jenkins Credentials
    withCredentials([string(credentialsId: 'n8n-webhook', variable: 'N8N_WEBHOOK_URL')]) {
        if (isUnix()) {
            sh """
                curl -s -X POST "${N8N_WEBHOOK_URL}" -H 'Content-Type: application/json' -d '${jsonPayload}'
            """
        } else {
            bat "powershell -NoProfile -Command \"Invoke-RestMethod -Uri '${N8N_WEBHOOK_URL}' -Method Post -ContentType 'application/json' -Body '${jsonPayload}'\""
        }
    }
}

pipeline {
    // ใช้ any agent เพื่อหลีกเลี่ยงปัญหา Docker path mounting บน Windows
    agent any

    // กำหนด environment variables
    environment {
        // ใช้ค่าเป็น "credentialsId" ของ Jenkins โดยตรงสำหรับ docker.withRegistry
        DOCKER_HUB_CREDENTIALS_ID = 'dockerhub-cred'
        DOCKER_REPO               = "iamsamitdev/express-docker-app"
        APP_NAME                  = "express-docker-app"
        DEPLOY_SERVER_CRED_ID     = 'deploy-server-cred'
        DEPLOY_SERVER             = "user@your-server-ip"
    }

    parameters {
        choice(name: 'ACTION', choices: ['Build & Deploy', 'Rollback'], description: 'เลือก Action ที่ต้องการ: Build ใหม่ หรือ Rollback') // Build & Deploy = สร้างใหม่และ deploy, Rollback = นำ build เก่ากลับมาใช้
        string(name: 'ROLLBACK_BUILD_NUMBER', defaultValue: '', description: 'จำเป็นสำหรับ Rollback: ใส่ Build Number เก่าที่ต้องการนำกลับมาใช้ (เช่น 42)')
        choice(name: 'DEPLOY_TARGET', choices: ['none', 'local', 'server'], description: 'เลือกปลายทาง (ใช้สำหรับทั้ง Build และ Rollback)') // none = ไม่ deploy, local = เครื่อง Jenkins agent, server = เครื่องปลายทาง
    }

    // กำหนด stages ของ Pipeline
    stages {
        // ========== BUILD STAGES (ทำงานเมื่อ ACTION = 'Build & Deploy') ==========
        // Stage 1: ดึงโค้ดล่าสุดจาก Git
        stage('Checkout') {
            when { expression { params.ACTION == 'Build & Deploy' } }
            steps {
                echo "Checking out code..."
                checkout scm
            }
        }

        // Stage 2: ติดตั้ง dependencies และรันเทสต์ (รองรับทุก Platform)
        stage('Install & Test') {
            when { expression { params.ACTION == 'Build & Deploy' } }
            steps {
                echo "Running tests inside a Docker container..."
                docker.image('node:22-alpine').inside {
                    sh 'npm install && npm test'
                }
            }
        }

        // Stage 3: สร้างและ Push Docker image ไปยัง Docker Hub
        stage('Build & Push Docker Image') {
            when { expression { params.ACTION == 'Build & Deploy' } }
            steps {
                script {
                    def imageTag = "${env.BUILD_NUMBER}"
                    echo "Building and pushing image: ${env.DOCKER_REPO}:${imageTag}"
                    docker.withRegistry('https://index.docker.io/v1/', env.DOCKER_HUB_CREDENTIALS_ID) {
                        def customImage = docker.build("${env.DOCKER_REPO}:${imageTag}", "--target production .")
                        customImage.push()
                        customImage.push('latest')
                    }
                }
            }
        }
        
        // ========== DEPLOY STAGE (ทำงานเมื่อ ACTION = 'Build & Deploy') ==========
        // Stage 4: ดึงและรัน Docker image บนเครื่องปลายทาง (local หรือ server)
        stage('Deploy Latest') {
            when {
                expression { params.ACTION == 'Build & Deploy' && params.DEPLOY_TARGET != 'none' }
            }
            steps {
                script {
                    def imageToDeploy = "${env.DOCKER_REPO}:latest"
                    echo "Deploying LATEST image to ${params.DEPLOY_TARGET}"
                    
                    if (params.DEPLOY_TARGET == 'local') {
                        def deployCmd = "docker pull ${imageToDeploy} && docker stop ${env.APP_NAME} || true && docker rm ${env.APP_NAME} || true && docker run -d --name ${env.APP_NAME} -p 3000:3000 ${imageToDeploy}"
                        isUnix() ? sh(deployCmd) : bat(deployCmd.replaceAll("true", "echo ignore"))
                    } else if (params.DEPLOY_TARGET == 'server') {
                        sshagent([env.DEPLOY_SERVER_CRED_ID]) {
                            sh "ssh -o StrictHostKeyChecking=no ${env.DEPLOY_SERVER} 'docker pull ${imageToDeploy} && docker stop ${env.APP_NAME} || true && docker rm ${env.APP_NAME} || true && docker run -d --name ${env.APP_NAME} -p 3000:3000 ${imageToDeploy}'"
                        }
                    }
                }
            }
            post {
                success {
                    notifyN8n('success', "Deploy Latest to ${params.DEPLOY_TARGET}", 'latest')
                }
            }
        }

        // ========== ROLLBACK STAGE (ทำงานเมื่อ ACTION = 'Rollback') ==========
        // Stage 5: ดึงและรัน Docker image เวอร์ชันเก่าที่ระบุโดยผู้ใช้
        stage('Execute Rollback') {
            when {
                expression { params.ACTION == 'Rollback' && params.DEPLOY_TARGET != 'none' }
            }
            steps {
                script {
                    if (params.ROLLBACK_BUILD_NUMBER.trim().isEmpty()) {
                        error "เมื่อเลือก Rollback กรุณาระบุ 'ROLLBACK_BUILD_NUMBER'"
                    }

                    def rollbackTag = params.ROLLBACK_BUILD_NUMBER.trim()
                    def imageToDeploy = "${env.DOCKER_REPO}:${rollbackTag}"
                    echo "ROLLING BACK to image: ${imageToDeploy} on ${params.DEPLOY_TARGET}"

                    if (params.DEPLOY_TARGET == 'local') {
                         def deployCmd = "docker pull ${imageToDeploy} && docker stop ${env.APP_NAME} || true && docker rm ${env.APP_NAME} || true && docker run -d --name ${env.APP_NAME} -p 3000:3000 ${imageToDeploy}"
                         isUnix() ? sh(deployCmd) : bat(deployCmd.replaceAll("true", "echo ignore"))
                    } else if (params.DEPLOY_TARGET == 'server') {
                        sshagent([env.DEPLOY_SERVER_CRED_ID]) {
                            sh "ssh -o StrictHostKeyChecking=no ${env.DEPLOY_SERVER} 'docker pull ${imageToDeploy} && docker stop ${env.APP_NAME} || true && docker rm ${env.APP_NAME} || true && docker run -d --name ${env.APP_NAME} -p 3000:3000 ${imageToDeploy}'"
                        }
                    }
                }
            }
            post {
                success {
                    notifyN8n('success', "Rollback to ${params.ROLLBACK_BUILD_NUMBER}", params.ROLLBACK_BUILD_NUMBER)
                }
            }
        }
    }

    post {
        always {
            // ส่งข้อมูลไปยัง n8n ผ่าน Webhook URL ที่เก็บใน Jenkins Credentials
            stage('Cleanup Docker on Agent') {
                // ไม่จำเป็นต้องทำงานตอน Rollback เพราะไม่ได้สร้าง image ใหม่
                when { expression { params.ACTION == 'Build & Deploy' } }
                steps {
                    script {
                        echo "Cleaning up local Docker images on agent..."
                        def cleanupCmd = "docker image rm -f ${env.DOCKER_REPO}:${env.BUILD_NUMBER} || true && docker image rm -f ${env.DOCKER_REPO}:latest || true"
                        isUnix() ? sh(cleanupCmd) : bat(cleanupCmd.replaceAll("true", "echo ignore"))
                    }
                }
            }
        }
        failure {
            def imageTag = (params.ACTION == 'Rollback') ? params.ROLLBACK_BUILD_NUMBER : 'latest'
            notifyN8n('failed', "Pipeline Failed during ${params.ACTION}", imageTag)
        }
    }
}